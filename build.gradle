apply plugin: 	'c'
apply plugin: 	'maven-publish'

group = 'com.agres.isopad'
version = '0.0.1'

String ANSI_BOLD_WHITE 		=	"\u001B[0;1m";
String ANSI_RESET 			= 	"\u001B[0m";
String ANSI_BLACK 			= 	"\u001B[30m";
String ANSI_RED 			= 	"\u001B[31m";
String ANSI_GREEN 			= 	"\u001B[32m";
String ANSI_YELLOW 			= 	"\u001B[33m";
String ANSI_BLUE 			= 	"\u001B[34m";
String ANSI_PURPLE 			= 	"\u001B[35m";
String ANSI_CYAN 			= 	"\u001B[36m";
String ANSI_WHITE 			= 	"\u001B[37m";
String CHECK_MARK 			= 	"\u2713";
String NEUTRAL_FACE 		= 	"\u0CA0_\u0CA0";
String X_MARK	 			= 	"\u274C";

model 
{
	buildTypes 
	{
        UnitTestHarness
        Release
    }
    
	platforms 
	{
		"stm32f7xx-arm" 
		{
            architecture "arm"
        }		
	}
    
    toolChains 
    {
		gcc(Gcc) 
		{
	  		target('stm32f7xx-arm') 
	  		{
				def prefix = ""
				
				cCompiler.executable         = prefix + cCompiler.executable
				cppCompiler.executable       = prefix + cppCompiler.executable
				assembler.executable         = prefix + assembler.executable
				linker.executable            = prefix + linker.executable
				staticLibArchiver.executable = prefix + staticLibArchiver.executable
    		}
		}
	}
	
    components 
    {
//        teste(NativeLibrarySpec) {
//			targetPlatform "arm"
//		}

		all 
		{
            binaries.withType(SharedLibraryBinarySpec) 
            {
                buildable = false
            }
			
			sources 
			{
				c 
				{
					source 
					{
						srcDir "src"
						include "**/*.c"
					}
					
					exportedHeaders 
					{
						srcDir "src"
					}
				}
			}
        }
    }
}

														/////////////
														/// TASKS ///
														/////////////

task ("Clean Host Project", type: Exec) {
	workingDir 'UnitTestHarness'

  	commandLine 'make', 'clean'
}

task ("Build Project For Host", dependsOn: "Clean Host Project", type: Exec) {
	workingDir 'UnitTestHarness'

  	commandLine 'make'
}

task ("Clean Target Project", dependsOn: "Build Project For Host", type: Exec) { 
	workingDir 'Release'

  	commandLine 'make', 'clean'
}

task ("Build Project For Target", dependsOn: "Clean Target Project", type: Exec) { 
	workingDir 'Release'

  	commandLine 'make'
}

task ("Clean Terminal", dependsOn: "Build Project For Target", type: Exec) {
	commandLine 'clear'
	
	doLast 
	{
		out.println( "--------------------------------------------------------------------------");
        out.println(ANSI_BOLD_WHITE + "IsoPad" + ANSI_RESET);
        out.println( "--------------------------------------------------------------------------\n");
    }
}

task ("Perform Unit Test Harness On Host", dependsOn: "Clean Terminal", type: Exec) { 
	workingDir 'UnitTestHarness'

  	commandLine './TemplateGoogleTestAutomatedBuild'
  	
  	doLast
  	{
  		out.println(ANSI_GREEN + "\nPassed all Tests\n" + ANSI_RESET);
  	}
}

task ("Generate Documentation", dependsOn: "Perform Unit Test Harness On Host", type: Exec) { 
	commandLine 'doxygen'
}

task ("Remove Possible Symbolic Link", dependsOn: "Generate Documentation", type: Exec) { 
	workingDir 'Documentation/Doxygen'
	
	commandLine 'rm', 'index.html'
}

task ("Create Symbolic Link", dependsOn: "Remove Possible Symbolic Link", type: Exec) { 
	workingDir 'Documentation/Doxygen'
	
	commandLine 'ln', '-s', 'html/index.html', 'index.html'
}

task AutomatedBuild(dependsOn: "Create Symbolic Link", type: Zip) {
	destinationDir = file('Out')
	
	baseName = 'TESTE'
	version = project.version
	extension = 'zip'

	into('UnitTestHarness') {
	    from fileTree(dir: 'UnitTestHarness/', 	include: '*.elf')
	    from fileTree(dir: 'UnitTestHarness/', 	include: '*.hex')
	    from fileTree(dir: 'UnitTestHarness/', 	include: '*.bin')
	    from fileTree(dir: 'UnitTestHarness/', 	include: '*.a')
	    from fileTree(dir: 'UnitTestHarness/', 	include: '*.so')
	}
	
	into('Release') { 
		from fileTree(dir: 'Release/', 	include: '*.elf')
	    from fileTree(dir: 'Release/', 	include: '*.hex')
	    from fileTree(dir: 'Release/', 	include: '*.bin')
	    from fileTree(dir: 'Release/', 	include: '*.a')
	    from fileTree(dir: 'Release/', 	include: '*.so')
	}
	
	into('Documentation') { 
		into('html') {
			from fileTree(dir: 'Documentation/Doxygen/html', 	include: '*.*')
		}
		
		from fileTree(dir: 'Documentation/Doxygen', 		include: 'index.html')
	}
	
	doLast
	{
	}
}

task PerformMemoryLeakAnalysis(type: Exec) { 
	workingDir 'Release'

  	commandLine 'valgrind', '--tool=memcheck', '--leak-check=full', './TemplateGoogleTestAutomatedBuild'
}